package il.org.spartan.Leonidas.plugin.GUI.TipperCreatorOld;

import com.intellij.psi.PsiElement;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import il.org.spartan.Leonidas.auxilary_layer.step;
import il.org.spartan.Leonidas.plugin.leonidas.GenericPsiElementStub.StubName;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

/**
 * @author michalcohen
 * @since 24-02-17
 */
class TipperCreator extends JFrame {
    private JPanel panel1;
    private JTextArea toCode;
    private JTextArea fromCode;
    private JButton IgnoreContent;
    private JButton selectGenerics;
    private JButton matchGeneric;
    private PsiElement root;
    private int genericElementIndex = 1;
    private int startOfMatchedFrom;
    private int endOfMatchedFrom;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    TipperCreator(PsiElement element) {
        super("Create new tipper");
        root = element;
        setContentPane(panel1);
        fromCode.setText(element.getText());
        toCode.setText(element.getText());
        pack();
        setVisible(true);
        IgnoreContent.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
                JTextArea focused = fromCode;
                if (toCode.getSelectedText() != null)
                    focused = toCode;
                else if (fromCode.getSelectedText() == null)
                    return;
                PsiElement p = step.getHighestParent(element.findElementAt(focused.getSelectionStart()));
                StubName givenType = StubName.getGeneralTye(p);
                focused.replaceSelection(givenType.stubMethodCallExpressionStatement());
            }
        });
        selectGenerics.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
                if (fromCode.getSelectedText() == null || StubName.valueOfStringExpression(fromCode.getSelectedText()) == null)
                    return;
                startOfMatchedFrom = fromCode.getSelectionStart();
                endOfMatchedFrom = fromCode.getSelectionEnd();
                toCode.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }
        });
        matchGeneric.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
                if (toCode.getCursor().getType() != Cursor.HAND_CURSOR)
                    return;
                toCode.setCursor(new Cursor(Cursor.TEXT_CURSOR));
                if (StubName.valueOfStringExpression(toCode.getSelectedText()) == null)
                    return;
                StubName stub1 = StubName
                        .valueOfStringExpression(fromCode.getText().substring(startOfMatchedFrom, endOfMatchedFrom)),
                        stub2 = StubName.valueOfStringExpression(toCode.getSelectedText());
                if (!stub1.equals(stub2))
                    return;
                String toSelected = toCode.getSelectedText(),
                        replaceString = toSelected.substring(0, toSelected.length() - 1) + genericElementIndex + ")";
                toCode.replaceSelection(replaceString);
                fromCode.replaceRange(replaceString, startOfMatchedFrom, endOfMatchedFrom);
                ++genericElementIndex;
            }
        });
    }

    public void createLeonidasTipper() {

    }

    @SuppressWarnings("ResultOfMethodCallIgnored")
    public void applyLeonidasTipper() {
        root.getText();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(5, 2, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(5, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 0, 5, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(400, 600), null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel2.add(scrollPane1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        fromCode = new JTextArea();
        fromCode.setText("Insert template code here");
        scrollPane1.setViewportView(fromCode);
        final JScrollPane scrollPane2 = new JScrollPane();
        panel2.add(scrollPane2, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        toCode = new JTextArea();
        toCode.setText("Insert template code here");
        scrollPane2.setViewportView(toCode);
        final JLabel label1 = new JLabel();
        label1.setText("from");
        panel2.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("to");
        panel2.add(label2, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel2.add(spacer1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        selectGenerics = new JButton();
        selectGenerics.setText("Select Generic Components");
        selectGenerics.setMnemonic('S');
        selectGenerics.setDisplayedMnemonicIndex(0);
        panel1.add(selectGenerics, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        matchGeneric = new JButton();
        matchGeneric.setText("Match Generic Components");
        matchGeneric.setMnemonic('M');
        matchGeneric.setDisplayedMnemonicIndex(0);
        panel1.add(matchGeneric, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel3, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel3.add(spacer2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        IgnoreContent = new JButton();
        IgnoreContent.setText("Generalize Content");
        IgnoreContent.setMnemonic('G');
        IgnoreContent.setDisplayedMnemonicIndex(0);
        IgnoreContent.setToolTipText("make a specific code represent a more generalized contents such as expressions, statements, blocks and many more.");
        panel1.add(IgnoreContent, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }
}
